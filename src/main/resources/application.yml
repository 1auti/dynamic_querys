# =============== MAPEO DE PROVINCIAS ===============
provincia:
  mapping:
    "Buenos Aires": pba
    "Avellaneda": mda
    "La Pampa": santa-rosa
    "Chaco": chaco
    "Entre Ríos": entre-rios
    "Formosa": formosa

# =============== CONFIGURACIÓN H2 (METADATA) ===============
spring:
  datasource:
    jdbc-url: ${H2_URL:jdbc:h2:file:./data/query_metadata}
    username: ${H2_USERNAME:sa}
    password: ${H2_PASSWORD:}
    driver-class-name: org.h2.Driver
    hikari:
      pool-name: "H2-QueryMetadata-Pool"
      maximum-pool-size: 10
      minimum-idle: 2
      connection-timeout: 10000
      idle-timeout: 600000
      max-lifetime: 1800000

  # === JPA/H2 ===
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: ${SHOW_SQL:false}
    properties:
      hibernate:
        jdbc:
          batch_size: 100
          fetch_size: 1000
          order_inserts: true
          order_updates: true
        dialect: org.hibernate.dialect.H2Dialect
        format_sql: true
        use_sql_comments: true
    database-platform: org.hibernate.dialect.H2Dialect

  # === CONSOLA H2 ===
  h2:
    console:
      enabled: ${H2_CONSOLE_ENABLED:true}
      path: /h2-console
      settings:
        web-allow-others: ${H2_WEB_ALLOW_OTHERS:false}
        trace: false

  # === HTTP/MULTIPART ===
  servlet:
    multipart:
      max-file-size: 50MB
      max-request-size: 50MB

  # === JACKSON ===
  jackson:
    deserialization:
      fail-on-unknown-properties: false

# =============== POSTGRESQL DATASOURCES (OPTIMIZADO) ===============
postgresql:
  datasources:
    # ========== BUENOS AIRES (PBA) ==========
    pba:
      jdbc-url: ${PBA_URL:jdbc:postgresql://localhost:5432/pba_db?
        reWriteBatchedInserts=true&
        tcpKeepAlive=true&
        socketTimeout=600&
        loginTimeout=30&
        connectTimeout=30&
        defaultRowFetchSize=1000&
        assumeMinServerVersion=12.0&
        ApplicationName=TransitoSeguro-PBA&
        preferQueryMode=simple}
      username: ${PBA_USERNAME:postgres}
      password: ${PBA_PASSWORD:password}
      driver-class-name: org.postgresql.Driver
      hikari:
        pool-name: "PostgreSQL-PBA-Pool"

        # Pool sizing
        maximum-pool-size: 5
        minimum-idle: 2

        # Timeouts optimizados
        connection-timeout: 60000              # 60s (aumentado)
        idle-timeout: 600000                   # 10min
        max-lifetime: 1800000                  # 30min
        keepalive-time: 300000                 # 5min
        leak-detection-threshold: 120000       # 2min (reducido)

        # CRÍTICO para streaming
        auto-commit: false
        register-mbeans: true

        # SQL de inicialización
        connection-init-sql: >
          SET statement_timeout = '30min';
          SET work_mem = '64MB';
          SET max_parallel_workers_per_gather = 2;
          SET random_page_cost = 1.1;
          SET effective_cache_size = '4GB';
          SET idle_in_transaction_session_timeout = '10min';

        # Propiedades PostgreSQL
        data-source-properties:
          tcpKeepAlive: true
          defaultRowFetchSize: 1000
          prepareThreshold: 0                  # Desactiva cache de prepared statements
          logUnclosedConnections: true
          logServerErrorDetail: true

    # ========== AVELLANEDA (MDA) ==========
    mda:
      jdbc-url: ${MDA_URL:jdbc:postgresql://localhost:5432/mda_db?
        reWriteBatchedInserts=true&
        tcpKeepAlive=true&
        socketTimeout=600&
        loginTimeout=30&
        connectTimeout=30&
        defaultRowFetchSize=1000&
        assumeMinServerVersion=12.0&
        ApplicationName=TransitoSeguro-MDA&
        preferQueryMode=simple}
      username: ${MDA_USERNAME:postgres}
      password: ${MDA_PASSWORD:password}
      driver-class-name: org.postgresql.Driver
      hikari:
        pool-name: "PostgreSQL-MDA-Pool"
        maximum-pool-size: 5
        minimum-idle: 2
        connection-timeout: 60000
        idle-timeout: 600000
        max-lifetime: 1800000
        keepalive-time: 300000
        leak-detection-threshold: 120000
        auto-commit: false
        register-mbeans: true
        connection-init-sql: >
          SET statement_timeout = '30min';
          SET work_mem = '64MB';
          SET max_parallel_workers_per_gather = 2;
          SET random_page_cost = 1.1;
          SET effective_cache_size = '4GB';
          SET idle_in_transaction_session_timeout = '10min';
        data-source-properties:
          tcpKeepAlive: true
          defaultRowFetchSize: 1000
          prepareThreshold: 0
          logUnclosedConnections: true
          logServerErrorDetail: true

    # ========== LA PAMPA (SANTA ROSA) ==========
    santa-rosa:
      jdbc-url: ${SANTA_ROSA_URL:jdbc:postgresql://localhost:5432/santa_rosa_db?
        reWriteBatchedInserts=true&
        tcpKeepAlive=true&
        socketTimeout=600&
        loginTimeout=30&
        connectTimeout=30&
        defaultRowFetchSize=1000&
        assumeMinServerVersion=12.0&
        ApplicationName=TransitoSeguro-SantaRosa&
        preferQueryMode=simple}
      username: ${SANTA_ROSA_USERNAME:postgres}
      password: ${SANTA_ROSA_PASSWORD:password}
      driver-class-name: org.postgresql.Driver
      hikari:
        pool-name: "PostgreSQL-SantaRosa-Pool"
        maximum-pool-size: 5
        minimum-idle: 2
        connection-timeout: 60000
        idle-timeout: 600000
        max-lifetime: 1800000
        keepalive-time: 300000
        leak-detection-threshold: 120000
        auto-commit: false
        register-mbeans: true
        connection-init-sql: >
          SET statement_timeout = '30min';
          SET work_mem = '64MB';
          SET max_parallel_workers_per_gather = 2;
          SET random_page_cost = 1.1;
          SET effective_cache_size = '4GB';
          SET idle_in_transaction_session_timeout = '10min';
        data-source-properties:
          tcpKeepAlive: true
          defaultRowFetchSize: 1000
          prepareThreshold: 0
          logUnclosedConnections: true
          logServerErrorDetail: true

    # ========== CHACO ==========
    chaco:
      jdbc-url: ${CHACO_URL:jdbc:postgresql://localhost:5432/chaco_db?
        reWriteBatchedInserts=true&
        tcpKeepAlive=true&
        socketTimeout=600&
        loginTimeout=30&
        connectTimeout=30&
        defaultRowFetchSize=1000&
        assumeMinServerVersion=12.0&
        ApplicationName=TransitoSeguro-Chaco&
        preferQueryMode=simple}
      username: ${CHACO_USERNAME:postgres}
      password: ${CHACO_PASSWORD:password}
      driver-class-name: org.postgresql.Driver
      hikari:
        pool-name: "PostgreSQL-Chaco-Pool"
        maximum-pool-size: 5
        minimum-idle: 2
        connection-timeout: 60000
        idle-timeout: 600000
        max-lifetime: 1800000
        keepalive-time: 300000
        leak-detection-threshold: 120000
        auto-commit: false
        register-mbeans: true
        connection-init-sql: >
          SET statement_timeout = '30min';
          SET work_mem = '64MB';
          SET max_parallel_workers_per_gather = 2;
          SET random_page_cost = 1.1;
          SET effective_cache_size = '4GB';
          SET idle_in_transaction_session_timeout = '10min';
        data-source-properties:
          tcpKeepAlive: true
          defaultRowFetchSize: 1000
          prepareThreshold: 0
          logUnclosedConnections: true
          logServerErrorDetail: true

    # ========== ENTRE RÍOS ==========
    entre-rios:
      jdbc-url: ${ENTRE_RIOS_URL:jdbc:postgresql://localhost:5432/entre_rios_db?
        reWriteBatchedInserts=true&
        tcpKeepAlive=true&
        socketTimeout=600&
        loginTimeout=30&
        connectTimeout=30&
        defaultRowFetchSize=1000&
        assumeMinServerVersion=12.0&
        ApplicationName=TransitoSeguro-EntreRios&
        preferQueryMode=simple}
      username: ${ENTRE_RIOS_USERNAME:postgres}
      password: ${ENTRE_RIOS_PASSWORD:password}
      driver-class-name: org.postgresql.Driver
      hikari:
        pool-name: "PostgreSQL-EntreRios-Pool"
        maximum-pool-size: 5
        minimum-idle: 2
        connection-timeout: 60000
        idle-timeout: 600000
        max-lifetime: 1800000
        keepalive-time: 300000
        leak-detection-threshold: 120000
        auto-commit: false
        register-mbeans: true
        connection-init-sql: >
          SET statement_timeout = '30min';
          SET work_mem = '64MB';
          SET max_parallel_workers_per_gather = 2;
          SET random_page_cost = 1.1;
          SET effective_cache_size = '4GB';
          SET idle_in_transaction_session_timeout = '10min';
        data-source-properties:
          tcpKeepAlive: true
          defaultRowFetchSize: 1000
          prepareThreshold: 0
          logUnclosedConnections: true
          logServerErrorDetail: true

    # ========== FORMOSA ==========
    formosa:
      jdbc-url: ${FORMOSA_URL:jdbc:postgresql://localhost:5432/formosa_db?
        reWriteBatchedInserts=true&
        tcpKeepAlive=true&
        socketTimeout=600&
        loginTimeout=30&
        connectTimeout=30&
        defaultRowFetchSize=1000&
        assumeMinServerVersion=12.0&
        ApplicationName=TransitoSeguro-Formosa&
        preferQueryMode=simple}
      username: ${FORMOSA_USERNAME:postgres}
      password: ${FORMOSA_PASSWORD:password}
      driver-class-name: org.postgresql.Driver
      hikari:
        pool-name: "PostgreSQL-Formosa-Pool"
        maximum-pool-size: 5
        minimum-idle: 2
        connection-timeout: 60000
        idle-timeout: 600000
        max-lifetime: 1800000
        keepalive-time: 300000
        leak-detection-threshold: 120000
        auto-commit: false
        register-mbeans: true
        connection-init-sql: >
          SET statement_timeout = '30min';
          SET work_mem = '64MB';
          SET max_parallel_workers_per_gather = 2;
          SET random_page_cost = 1.1;
          SET effective_cache_size = '4GB';
          SET idle_in_transaction_session_timeout = '10min';
        data-source-properties:
          tcpKeepAlive: true
          defaultRowFetchSize: 1000
          prepareThreshold: 0
          logUnclosedConnections: true
          logServerErrorDetail: true

# =============== SERVIDOR TOMCAT ===============
server:
  port: ${SERVER_PORT:8080}
  tomcat:
    max-connections: 50
    threads:
      max: 20
      min-spare: 5
    connection-timeout: 30000
    max-http-post-size: 52428800
  error:
    include-message: always
    include-binding-errors: always

# =============== CONFIGURACIÓN APLICACIÓN ===============
app:
  # === QUERY REGISTRY ===
  query-registry:
    auto-scan-enabled: ${AUTO_SCAN_QUERIES:true}
    queries-path: ${QUERIES_PATH:classpath:querys/}
    file-extensions: ${QUERY_EXTENSIONS:sql}
    auto-analyze-on-startup: ${AUTO_ANALYZE_QUERIES:true}
    scan-on-startup: ${SCAN_ON_STARTUP:true}
    update-existing: ${UPDATE_EXISTING:true}
    h2-file-path: ${H2_FILE_PATH:./data/query_metadata}
    backup-enabled: ${BACKUP_ENABLED:true}
    backup-interval-hours: ${BACKUP_INTERVAL:24}
    upload-enabled: ${UPLOAD_ENABLED:true}
    upload-path: ${UPLOAD_PATH:./uploads/queries/}
    max-file-size: ${MAX_QUERY_FILE_SIZE:1MB}
    allowed-extensions: ${ALLOWED_EXTENSIONS:sql}

  # === QUERY ANALYZER ===
  query-analyzer:
    version: "1.0"
    enable-cache: false
    fallback-strategy: CONSOLIDACION_SIMPLE
    max-analysis-time-ms: 5000

  # === CONSOLIDACIÓN ===
  consolidacion:
    agregacion:
      umbral-error: 10
      limite-validacion: 10000
      limite-absoluto: 100000
    umbral:
      memoria: 500000                           # Registros antes de usar archivos temp
    cache:
      dir: ${java.io.tmpdir}/consolidacion
    default-strategy: "inteligente"
    max-grouping-fields: 5
    min-numeric-fields: 1

  # === LÍMITES ===
  limits:
    max-records-sync: 1000000000
    max-records-total: 100000
    max-records-display: 10000
    max-concurrent-queries: 10

  # === BATCH PROCESSING (OPTIMIZADO) ===
  batch:
    size: 500                                    # ⬇️ Reducido de 10000 a 500
    memory-critical-threshold: 0.85
    parallel-threshold-per-province: 50000
    parallel-threshold-total: 300000
    massive-threshold-per-province: 200000
    max-parallel-provinces: 3                    # ⬇️ Reducido de 6 a 3
    thread-pool-size: 6

  # === ASYNC ===
  async:
    thread-pool-size: 10

# =============== LOGGING ===============
logging:
  level:
    # Nivel general
    org.transito_seguro: INFO

    # Componentes clave
    org.transito_seguro.component.BatchProcessor: INFO
    org.transito_seguro.repository.impl.InfraccionesRepositoryImpl: INFO
    org.transito_seguro.component.ParametrosProcessor: INFO
    org.transito_seguro.component.StreamingFormatoConverter: INFO
    org.transito_seguro.service.InfraccionesService: INFO

    # Spring/Hibernate
    org.springframework.jdbc: WARN
    org.springframework.jdbc.core.JdbcTemplate: WARN
    org.springframework.jdbc.datasource: WARN
    org.hibernate.SQL: ${HIBERNATE_SQL_LOG:WARN}
    org.hibernate.type: ${HIBERNATE_TYPE_LOG:WARN}

    # Otros
    com.zaxxer.hikari: INFO
    org.postgresql: WARN
    org.h2: INFO

  pattern:
    console: "%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"

# =============== ACTUATOR ===============
management:
  endpoints:
    web:
      exposure:
        include: health,metrics,info,h2,query-registry
  endpoint:
    health:
      show-details: when_authorized
    metrics:
      enabled: true
    query-registry:
      enabled: true

# =============== PROFILES ===============
---
# ========== DEVELOPMENT ==========
spring:
  config:
    activate:
      on-profile: development

  h2:
    console:
      enabled: true

  jpa:
    show-sql: true
    properties:
      hibernate:
        format_sql: true

app:
  query-registry:
    scan-on-startup: true
    upload-enabled: true

  batch:
    size: 100                              # Lotes más pequeños en dev

logging:
  level:
    org.transito_seguro: DEBUG
    org.transito_seguro.repository.impl.InfraccionesRepositoryImpl: DEBUG
    org.hibernate.SQL: DEBUG
    org.hibernate.type: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE

---
# ========== PRODUCTION ==========
spring:
  config:
    activate:
      on-profile: production

  datasource:
    jdbc-url: jdbc:h2:file:/opt/app/data/query_metadata;DB_CLOSE_ON_EXIT=FALSE;AUTO_SERVER=FALSE
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5

  h2:
    console:
      enabled: false

  jpa:
    show-sql: false

app:
  query-registry:
    backup-enabled: true
    backup-interval-hours: 12
    upload-enabled: false

  batch:
    size: 500                              # Lotes optimizados en prod

logging:
  level:
    org.transito_seguro: INFO
    org.hibernate.SQL: WARN

---
# ========== TESTING ==========
spring:
  config:
    activate:
      on-profile: testing

  datasource:
    jdbc-url: jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE

  jpa:
    hibernate:
      ddl-auto: create-drop
    show-sql: true

app:
  query-registry:
    auto-analyze-on-startup: false
    scan-on-startup: false
    upload-enabled: false

  batch:
    size: 50                               # Lotes pequeños en tests