package org.transito_seguro.component.processor.pagination;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;
import org.transito_seguro.component.processor.memory.MemoryMonitor;
import org.transito_seguro.dto.ParametrosFiltrosDTO;

import java.util.Map;

/**
 * Calculador de tama침os de p치gina y offsets para paginaci칩n.
 *
 * Responsabilidades:
 * - Calcular tama침o de p치gina 칩ptimo seg칰n memoria
 * - Construir filtros para paginaci칩n OFFSET
 * - Construir filtros para paginaci칩n KEYSET
 */
@Slf4j
@Component
@RequiredArgsConstructor
public class PageCalculator {

    private final MemoryMonitor memoryMonitor;
    private final KeysetManager keysetManager;

    /**
     * Tama침o de p치gina por defecto.
     */
    private static final int DEFAULT_PAGE_SIZE = 10000;

    /**
     * Tama침o m칤nimo de p치gina (seguridad).
     */
    private static final int MIN_PAGE_SIZE = 1000;

    /**
     * Calcula el tama침o de p치gina 칩ptimo seg칰n memoria disponible.
     *
     * @param batchSizeBase Tama침o base deseado
     * @return Tama침o ajustado seg칰n memoria
     */
    public int calcularTamanioPaginaOptimo(int batchSizeBase) {
        // Si el tama침o base es muy peque침o, usar default
        if (batchSizeBase < MIN_PAGE_SIZE) {
            batchSizeBase = DEFAULT_PAGE_SIZE;
        }

        // Ajustar seg칰n memoria disponible (delegado a MemoryMonitor)
        int tamanoAjustado = memoryMonitor.calcularTamanoLoteOptimo(batchSizeBase);

        log.debug("游늺 Tama침o de p치gina calculado: {} (base: {})",
                tamanoAjustado, batchSizeBase);

        return tamanoAjustado;
    }

    /**
     * Crea filtros para la primera iteraci칩n de paginaci칩n.
     *
     * Primera iteraci칩n:
     * - NO usa keyset
     * - Usa l칤mite razonable (no Integer.MAX_VALUE)
     * - offset = 0
     *
     * @param filtrosOriginales Filtros base
     * @param batchSize Tama침o de p치gina
     * @return Filtros para primera p치gina
     */
    public ParametrosFiltrosDTO crearFiltrosPrimeraPagina(
            ParametrosFiltrosDTO filtrosOriginales,
            int batchSize) {

        log.debug("游늯 Creando filtros para primera p치gina: limite={}", batchSize);

        return filtrosOriginales.toBuilder()
                .limite(batchSize)
                .offset(null)
                .lastId(null)
                .lastSerieEquipo(null)
                .lastLugar(null)
                .lastKeysetConsolidacion(null)
                .build();
    }

    /**
     * Crea filtros para paginaci칩n OFFSET (sin keyset).
     *
     * Usa offset incremental: 0, 10000, 20000, etc.
     *
     * @param filtrosOriginales Filtros base
     * @param batchSize Tama침o de p치gina
     * @param offset Offset actual
     * @return Filtros con offset
     */
    public ParametrosFiltrosDTO crearFiltrosConOffset(
            ParametrosFiltrosDTO filtrosOriginales,
            int batchSize,
            int offset) {

        log.debug("游늯 Creando filtros con OFFSET: limite={}, offset={}",
                batchSize, offset);

        return filtrosOriginales.toBuilder()
                .limite(batchSize)
                .offset(offset)
                .lastId(null)
                .lastSerieEquipo(null)
                .lastLugar(null)
                .lastKeysetConsolidacion(null)
                .build();
    }

    /**
     * Crea filtros para paginaci칩n KEYSET.
     *
     * Usa el 칰ltimo keyset guardado para la provincia.
     * Soporta dos tipos:
     * - Keyset est치ndar (id, serie_equipo, lugar)
     * - Keyset consolidaci칩n (campo_0, campo_1, campo_2)
     *
     * @param filtrosOriginales Filtros base
     * @param batchSize Tama침o de p치gina
     * @param provincia Nombre de la provincia
     * @return Filtros con keyset
     */
    public ParametrosFiltrosDTO crearFiltrosConKeyset(
            ParametrosFiltrosDTO filtrosOriginales,
            int batchSize,
            String provincia) {

        // Verificar si existe keyset para esta provincia
        if (!keysetManager.existeKeyset(provincia)) {
            log.warn("丘멆잺 No existe keyset para {}, usando primera p치gina", provincia);
            return crearFiltrosPrimeraPagina(filtrosOriginales, batchSize);
        }

        Object[] keyset = keysetManager.obtenerKeyset(provincia);

        // Detectar tipo de keyset
        if (keysetManager.esKeysetEstandar(keyset)) {
            return crearFiltrosConKeysetEstandar(filtrosOriginales, batchSize, keyset, provincia);
        } else {
            return crearFiltrosConKeysetConsolidacion(filtrosOriginales, batchSize, keyset, provincia);
        }
    }

    /**
     * Crea filtros con keyset est치ndar (id, serie_equipo, lugar).
     */
    private ParametrosFiltrosDTO crearFiltrosConKeysetEstandar(
            ParametrosFiltrosDTO filtrosOriginales,
            int batchSize,
            Object[] keyset,
            String provincia) {

        log.debug("游댐 Keyset est치ndar para {}: id={}", provincia, keyset[0]);

        return filtrosOriginales.toBuilder()
                .limite(batchSize)
                .offset(null)  // NUNCA usar offset con keyset
                .lastId((Integer) keyset[0])
                .lastSerieEquipo(keyset.length > 1 ? (String) keyset[1] : null)
                .lastLugar(keyset.length > 2 ? (String) keyset[2] : null)
                .lastKeysetConsolidacion(null)
                .build();
    }

    /**
     * Crea filtros con keyset de consolidaci칩n (campo_0, campo_1, campo_2).
     */
    private ParametrosFiltrosDTO crearFiltrosConKeysetConsolidacion(
            ParametrosFiltrosDTO filtrosOriginales,
            int batchSize,
            Object[] keyset,
            String provincia) {

        Map<String, Object> keysetMap = keysetManager.construirKeysetMap(keyset);

        log.debug("游댐 Keyset consolidaci칩n para {}: {} campos", provincia, keysetMap.size());

        return filtrosOriginales.toBuilder()
                .limite(batchSize)
                .offset(null)
                .lastId(null)
                .lastSerieEquipo(null)
                .lastLugar(null)
                .lastKeysetConsolidacion(keysetMap)
                .build();
    }

    /**
     * Determina si se debe continuar paginando seg칰n el tama침o del lote.
     *
     * Si el lote est치 incompleto (< batchSize), es la 칰ltima p치gina.
     *
     * @param tamanoLote Cantidad de registros en el lote actual
     * @param batchSize Tama침o de p치gina esperado
     * @return true si debe continuar paginando
     */
    public boolean debeContinuarPaginando(int tamanoLote, int batchSize) {
        boolean continuar = tamanoLote >= batchSize;

        if (!continuar) {
            log.debug("游끠 칔ltima p치gina detectada: {} < {}", tamanoLote, batchSize);
        }

        return continuar;
    }

    /**
     * Calcula el progreso de paginaci칩n.
     *
     * @param procesados Registros procesados hasta ahora
     * @param estimacion Estimaci칩n total (puede ser null)
     * @return Porcentaje de progreso (0-100) o -1 si no hay estimaci칩n
     */
    public double calcularProgreso(int procesados, Integer estimacion) {
        if (estimacion == null || estimacion == 0) {
            return -1.0;
        }

        return (double) procesados / estimacion * 100;
    }
}